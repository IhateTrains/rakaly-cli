on:
  push:
    tags: ['v*']

jobs:
  build:
    name: Upload Release Asset
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET:
    strategy:
      matrix:
        build:
        - linux-musl
        - macos
        - win-msvc
        include:
        - build: linux-musl
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-latest
          target: x86_64-pc-windows-msvc
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Decrypt tokens
      run: ./assets/ci/decrypt_secret.sh
      env:
        TOKEN_PASSPHRASE: ${{ secrets.TOKEN_PASSPHRASE }}
    - name: Set cross environment variables
      run: |
        echo "EU4_IRONMAN_TOKENS=/project/assets/tokens/eu4.txt" >> $GITHUB_ENV
        echo "CK3_IRONMAN_TOKENS=/project/assets/tokens/ck3.txt" >> $GITHUB_ENV
        echo "IMPERATOR_TOKENS=/project/assets/tokens/imperator.txt" >> $GITHUB_ENV
    - name: Use Cross
      if: matrix.target != ''
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET=--target ${{ matrix.target }}" >> $GITHUB_ENV
    - name: Build
      run: ${{ env.CARGO }} build --release --verbose $TARGET
    - name: Stage Release
      run:
        TAG_NAME=${{ github.event.release.tag_name }}
        STAGING="rakaly-${TAG_NAME:1}-${{ matrix.target }}"
        mkdir $STAGING 
        if [ "${{ matrix.os }}" = "windows*" ]; then
          cp "target/${{ matrix.target }}/release/rakaly.exe" "$STAGING/"
          7z a "$STAGING.zip" "$STAGING"
          echo "ASSET=$STAGING.zip" >> $GITHUB_ENV
        else
          strip "target/${{ matrix.target }}/release/rakaly"
          cp "target/${{ matrix.target }}/release/rakaly" "$STAGING/"
          tar czf "$STAGING.tar.gz" "$STAGING"
          echo "ASSET=$STAGING.tar.gz" >> $GITHUB_ENV
        fi
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream